?seq
a = seq(0,1,length.out=100)
a
a = seq(0,1,length.out=100)
l = 1
plot(a,a*(1-a)^l)
l = 2
plot(a,a*(1-a)^l)
l = 3
plot(a,a*(1-a)^l)
l = 4
plot(a,a*(1-a)^l)
l = 5
plot(a,a*(1-a)^l)
plot(a,a*(1-a)^l,ylim=c(0,0.25))
par(mfrow=c(2,2))
plot(a,a*(1-a)^l,ylim=c(0,0.25))
for (l in 1:4){
plot(a,a*(1-a)^l,ylim=c(0,0.25))
}
par(mfrow=c(2,2))
for (l in 1:4){
plot(a,a*(1-a)^l,ylim=c(0,0.25))
}
for (l in 5:8){
plot(a,a*(1-a)^l,ylim=c(0,0.25))
}
par(mfrow=c(2,2))
for (l in 5:8){
plot(a,a*(1-a)^l,ylim=c(0,0.25))
title(paste0('l = 'l))
}
par(mfrow=c(2,2))
for (l in 5:8){
plot(a,a*(1-a)^l,ylim=c(0,0.25))
title(paste0('l = ',l))
}
par(mfrow=c(2,2))
for (l in 1:4){
plot(a,a*(1-a)^l,ylim=c(0,0.25))
title(paste0('lag = ',l))
}
par(mfrow=c(2,3))
for (l in 1:6){
plot(a,a*(1-a)^l,ylim=c(0,0.25))
title(paste0('lag = ',l))
}
1.09^12
1.0931^12
2.9^(1/12)
1.05^12
1.8^(1/12)
a = seq(0,1,length.out = 100)
a
a = seq(0,1,length.out = 100)
par(mfrow=c(2,2))
for (i in 1:4){
plot(a,a*(1-a)^i);title(paste0('lag = ',i))
}
plot(a,a*(1-a)^i,ylim=c(0,0.25));title(paste0('lag = ',i))
a = seq(0,1,length.out = 100)
par(mfrow=c(2,2))
for (i in 1:4){
plot(a,a*(1-a)^i,ylim=c(0,0.25));title(paste0('lag = ',i))
}
a = seq(0,1,length.out = 1000)
par(mfrow=c(2,2))
for (i in 1:4){
plot(a,a*(1-a)^i,ylim=c(0,0.25));title(paste0('lag = ',i))
}
a = seq(0,1,length.out = 200)
par(mfrow=c(2,2))
for (i in 1:4){
plot(a,a*(1-a)^i,ylim=c(0,0.25));title(paste0('lag = ',i))
}
knn
?knn
??knn
method(predict()
method(predict)
methods(predict)
data(iris)
iris
## test set 만들기 ##
data(iris)
iris
idx = sample(1:nrow(iris),nrow(iris)*0.8)
idx
head(iris)
X_train = iris[idx,1:4]
X_train
y_train = iris$Species
y_train
y_test = iris$Species[-idx]
y_test
str(X_train)
distances = rep(0,nrow(X_train))
distances
__a = 1
x = x_test[1,]
x
X_test = X_test
X_test = iris[-idx,1:4]
idx = sample(1:nrow(iris),nrow(iris)*0.8)
X_train = iris[idx,1:4]
X_test = iris[-idx,1:4]
y_train = iris$Species[idx]
y_test = iris$Species[-idx]
k = 3
X_train = X_train
y_train = y_train
X_test = X_test
x = X_test[1,]
i-1
i=1
euclidean_distance(x,X_train[i])
## 모델구성 ##
euclidean_distance = function(x1,x2){
return(sqrt(sum((x1-x2)^2)))
}
euclidean_distance(x,X_train[i])
x
x_train[i]
X_train[i]
euclidean_distance(x,X_train[i,])
x-X_train[i]
x-X_train[i,]
(x-X_train[i,])^2
sum((x-X_train[i,])^2)
distances = rep(0,nrow(X_train))
for (i in 1:nrow(X_train)){
distances[i] = euclidean_distance(x,X_train[i,])
}
distances
rank(distances)
order(distances)
distances
order(distances)
library(shiny)
runGitHub('Shiny','insooAI',ref='main')
install.packages('ranger')
runGitHub('Shiny','insooAI',ref='main')
install.packages('vip')
runGitHub('Shiny','insooAI',ref='main')
install.packages('randomForest')
runGitHub('Shiny','insooAI',ref='main')
install.packages('forecast')
runGitHub('Shiny','insooAI',ref='main')
install.packages('plotly')
runGitHub('Shiny','insooAI',ref='main')
install.packages('ggthemes')
runGitHub('Shiny','insooAI',ref='main')
install.packages('klaR')
setwd("G:/내 드라이브/gdrive/work/model_code_from_scratch")
x = rbind(matrix(cbind(a1,a2),,2),matrix(cbind(b1,b2),,2))
set.seed(2)
n = 5
a1 = rnorm(n)
a2 = 1 - a1 + 2*runif(n)
b1 = rnorm(n)
b2 = -1 - b1 - 2*runif(n)
x = rbind(matrix(cbind(a1,a2),,2),matrix(cbind(b1,b2),,2))
x
x = rbind(matrix(cbind(a1,a2),ncol=2),matrix(cbind(b1,b2),ncol=2))
x
y = matrix(c(rep(1,n),rep(-1,n)))
y
plot(x, col=ifelse(y>0,4,2), pch='.', cex=7, xlab='x1', ylab='x2')
colnames(df) = c('x1','x2','y(label)')
df = cbind(x,y)
colnames(df) = c('x1','x2','y(label)')
head(df)
W = matrix(w_init, nrow=R+1, ncol=p, byrow=T)
eta=0.001, R=10000
R=10000
eta=0.001
X = cbind(1,x)
n = nrow(X)
p = ncol(X)
w_init = rep(0,p)
W = matrix(w_init, nrow=R+1, ncol=p, byrow=T)
W
dim(W)
